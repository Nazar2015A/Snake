{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardSize = 10;\nfunction linkedListNode(value) {\n  return {\n    value,\n    next: null\n  };\n}\nfunction singlyLinkedList(value) {\n  const node = linkedListNode(value);\n  return {\n    head: node,\n    tail: node\n  };\n}\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT'\n};\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(boardSize));\n  const [snakeCells, setSnakeCells] = useState([44]);\n  const [snake, setSnake] = useState(singlyLinkedList(44));\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col\n    };\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.includes(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n    const newHead = new linkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n    setSnakeCells(newSnakeCells);\n  };\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  };\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n      break;\n    }\n    const nextFoodShouldReverseDirection = Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cellValue, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${snakeCells.includes(cellValue) ? \"cell-green\" : \"\"}`\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"If7mUfTqbMtRdpVIS13JEOd/RRw=\");\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","boardSize","linkedListNode","value","next","singlyLinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","Board","_s","board","setBoard","createBoard","snakeCells","setSnakeCells","snake","setSnake","moveSnake","currentHeadCoords","row","col","nextHeadCoords","getCoordsInDirection","direction","isOutOfBounds","handleGameOver","nextHeadCell","includes","newHead","cell","currentHead","newSnakeCells","Set","delete","add","foodConsumed","foodCell","growSnake","foodShouldReverseDirection","reverseSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","LinkedListNode","currentTail","tailNextNodeDirection","getNextNodeDirection","newDirection","getOppositeDirection","setDirection","reverseLinkedList","snakeHead","maxPossibleCellValue","BOARD_SIZE","nextFoodCell","randomIntFromInterval","has","nextFoodShouldReverseDirection","Math","random","PROBABILITY_OF_DIRECTION_REVERSAL_FOOD","setFoodCell","setFoodShouldReverseDirection","setScore","score","snakeLLStartingValue","getStartingSnakeLLValue","LinkedList","className","children","map","rowIndex","cellValue","cellIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","counter","currentRow","push","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Board.css\";\r\n\r\nconst boardSize = 10;\r\n\r\nfunction linkedListNode(value) {\r\n  return {\r\n    value,\r\n    next: null,\r\n  };\r\n}\r\n\r\nfunction singlyLinkedList(value) {\r\n  const node = linkedListNode(value);\r\n  return {\r\n    head: node,\r\n    tail: node,\r\n  };\r\n}\r\n\r\nconst Direction = {\r\n  UP: 'UP',\r\n  RIGHT: 'RIGHT',\r\n  DOWN: 'DOWN',\r\n  LEFT: 'LEFT',\r\n};\r\n\r\nconst Board = () => {\r\n  const [board, setBoard] = useState(createBoard(boardSize));\r\n  const [snakeCells, setSnakeCells] = useState([44]);\r\n  const [snake, setSnake] = useState(singlyLinkedList(44));\r\n  const moveSnake = () => {\r\n    const currentHeadCoords = {\r\n      row: snake.head.value.row,\r\n      col: snake.head.value.col,\r\n    };\r\n\r\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\r\n    if (isOutOfBounds(nextHeadCoords, board)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n    if (snakeCells.includes(nextHeadCell)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n\r\n    const newHead = new linkedListNode({\r\n      row: nextHeadCoords.row,\r\n      col: nextHeadCoords.col,\r\n      cell: nextHeadCell,\r\n    });\r\n    const currentHead = snake.head;\r\n    snake.head = newHead;\r\n    currentHead.next = newHead;\r\n\r\n    const newSnakeCells = new Set(snakeCells);\r\n    newSnakeCells.delete(snake.tail.value.cell);\r\n    newSnakeCells.add(nextHeadCell);\r\n\r\n    snake.tail = snake.tail.next;\r\n    if (snake.tail === null) snake.tail = snake.head;\r\n\r\n    const foodConsumed = nextHeadCell === foodCell;\r\n    if (foodConsumed) {\r\n      // This function mutates newSnakeCells.\r\n      growSnake(newSnakeCells);\r\n      if (foodShouldReverseDirection) reverseSnake();\r\n      handleFoodConsumption(newSnakeCells);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n  };\r\n  const growSnake = newSnakeCells => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      // Snake is positioned such that it can't grow; don't do anything.\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n  const reverseSnake = () => {\r\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\r\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\r\n    setDirection(newDirection);\r\n\r\n    // The tail of the snake is really the head of the linked list, which\r\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\r\n    reverseLinkedList(snake.tail);\r\n    const snakeHead = snake.head;\r\n    snake.head = snake.tail;\r\n    snake.tail = snakeHead;\r\n  };\r\n\r\n  const handleFoodConsumption = newSnakeCells => {\r\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\r\n    let nextFoodCell;\r\n    // In practice, this will never be a time-consuming operation. Even\r\n    // in the extreme scenario where a snake is so big that it takes up 90%\r\n    // of the board (nearly impossible), there would be a 10% chance of generating\r\n    // a valid new food cell--so an average of 10 operations: trivial.\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    const nextFoodShouldReverseDirection =\r\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\r\n    setScore(score + 1);\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    setScore(0);\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  };\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cellValue, cellIndex) => (\r\n            <div\r\n              key={cellIndex}\r\n              className={`cell ${\r\n                snakeCells.includes(cellValue) ? \"cell-green\" : \"\"\r\n              }`}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}