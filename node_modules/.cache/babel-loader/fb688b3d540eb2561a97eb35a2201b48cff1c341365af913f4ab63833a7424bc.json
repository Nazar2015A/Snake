{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\"\n};\nconst BOARD_SIZE = 20;\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell\n  };\n};\nconst Board = () => {\n  _s();\n  const [begin, setBegin] = useState(false);\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState('');\n  const [chance, setChance] = useState(0.8);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(new LinkedList(getStartingSnakeLLValue(board)));\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value.cell]));\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [speed, setSpeed] = useState(150);\n  const [menu, setMenu] = useState(false);\n  const [speedIncreases, setSpeedIncreases] = useState(0);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", e => {\n      if (!menu) {\n        handleKeydown(e);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (score >= 50 * (speedIncreases + 1)) {\n      setSpeedIncreases(prev => prev + 1);\n      setSpeed(prev => {\n        if (prev > 50) {\n          return prev - 20;\n        }\n      });\n    }\n    if (score == 0) {\n      setSpeed(150);\n      setSpeedIncreases(0);\n    }\n  }, [score, speedIncreases]);\n  useInterval(() => {\n    if (!menu) {\n      moveSnake();\n    }\n  }, speed);\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== \"\";\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself = getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n  const moveSnake = () => {\n    if (begin) {\n      const currentHeadCoords = {\n        row: snake.head.value.row,\n        col: snake.head.value.col\n      };\n      const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n      if (isOutOfBounds(nextHeadCoords, board)) {\n        handleGameOver();\n        return;\n      }\n      const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n      if (snakeCells.has(nextHeadCell)) {\n        handleGameOver();\n        return;\n      }\n      const newHead = new LinkedListNode({\n        row: nextHeadCoords.row,\n        col: nextHeadCoords.col,\n        cell: nextHeadCell\n      });\n      const currentHead = snake.head;\n      snake.head = newHead;\n      currentHead.next = newHead;\n      const newSnakeCells = new Set(snakeCells);\n      newSnakeCells.delete(snake.tail.value.cell);\n      newSnakeCells.add(nextHeadCell);\n      snake.tail = snake.tail.next;\n      if (snake.tail === null) snake.tail = snake.head;\n      const foodConsumed = nextHeadCell === foodCell;\n      if (foodConsumed) {\n        growSnake(newSnakeCells);\n        handleFoodConsumption(newSnakeCells);\n      }\n      setSnakeCells(newSnakeCells);\n    }\n  };\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  };\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n      break;\n    }\n    setFoodCell(nextFoodCell);\n    setChance(Math.random());\n    if (chance > 0.05 && chance < 0.2) {\n      setScore(score + 5);\n    } else if (chance < 0.05) {\n      setScore(score + 10);\n    } else {\n      setScore(score + 1);\n    }\n  };\n  const handleGameOver = () => {\n    setMenu(true);\n  };\n  const resumeGame = () => {\n    setMenu(false);\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  const beginGame = () => {\n    if (name === '') {\n      alert('Enter');\n    } else {\n      setBegin(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!menu && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-game\",\n        children: [board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cellValue, cellIdx) => {\n            const className = getCellClassName(cellValue, foodCell, snakeCells, score, chance);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: className\n            }, cellIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 24\n            }, this);\n          })\n        }, rowIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)), !begin && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"begin-menu\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"begin-menu-score\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Enter your name\",\n              onChange: e => setName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"begin-menu-score-btn\",\n              onClick: beginGame,\n              children: \"Start game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), menu && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-menu\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-menu-score\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"board-menu-score-title\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"board-menu-score-title\",\n              children: [\"Your Result: \", score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"board-menu-score-btn\",\n            onClick: resumeGame,\n            children: \"Try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Board, \"uClFlefUgkqKFaqlq26oenRiUs0=\", false, function () {\n  return [useInterval];\n});\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1\n    };\n  }\n};\nconst isOutOfBounds = (coords, board) => {\n  const {\n    row,\n    col\n  } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\nconst getDirectionFromKey = key => {\n  if (key === \"ArrowUp\") return Direction.UP;\n  if (key === \"ArrowRight\") return Direction.RIGHT;\n  if (key === \"ArrowDown\") return Direction.DOWN;\n  if (key === \"ArrowLeft\") return Direction.LEFT;\n  return \"\";\n};\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {\n    row: currentRow,\n    col: currentCol\n  } = node.value;\n  const {\n    row: nextRow,\n    col: nextCol\n  } = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return \"\";\n};\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(snakeTail, currentDirection);\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col\n  };\n  const growthNodeCoords = getCoordsInDirection(currentTailCoords, growthDirection);\n  return growthNodeCoords;\n};\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\n  let className = \"cell\";\n  if (cellValue === foodCell) {\n    if (chance > 0.05 && chance < 0.2) {\n      className = \"cell cell-purple\";\n    } else if (chance < 0.05) {\n      className = \"cell cell-blue\";\n    } else {\n      className = \"cell cell-red\";\n    }\n  }\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","randomIntFromInterval","useInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedListNode","constructor","value","next","LinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","BOARD_SIZE","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","startingCell","row","col","cell","Board","_s","begin","setBegin","score","setScore","name","setName","chance","setChance","setBoard","createBoard","snake","setSnake","snakeCells","setSnakeCells","Set","foodCell","setFoodCell","direction","setDirection","speed","setSpeed","menu","setMenu","speedIncreases","setSpeedIncreases","window","addEventListener","e","handleKeydown","prev","moveSnake","newDirection","getDirectionFromKey","key","isValidDirection","snakeWillRunIntoItself","getOppositeDirection","size","currentHeadCoords","nextHeadCoords","getCoordsInDirection","isOutOfBounds","handleGameOver","nextHeadCell","has","newHead","currentHead","newSnakeCells","delete","add","foodConsumed","growSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","currentTail","maxPossibleCellValue","nextFoodCell","random","resumeGame","snakeLLStartingValue","beginGame","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIdx","cellValue","cellIdx","getCellClassName","placeholder","onChange","target","onClick","_c","counter","currentRow","push","coords","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","snakeTail","tailNextNodeDirection","growthDirection","currentTailCoords","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\r\n\r\nimport \"./Board.css\";\r\n\r\nclass LinkedListNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor(value) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n\r\nconst Direction = {\r\n  UP: \"UP\",\r\n  RIGHT: \"RIGHT\",\r\n  DOWN: \"DOWN\",\r\n  LEFT: \"LEFT\",\r\n};\r\n\r\nconst BOARD_SIZE = 20;\r\n\r\nconst getStartingSnakeLLValue = (board) => {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n  const startingRow = Math.round(rowSize / 3);\r\n  const startingCol = Math.round(colSize / 3);\r\n  const startingCell = board[startingRow][startingCol];\r\n  return {\r\n    row: startingRow,\r\n    col: startingCol,\r\n    cell: startingCell,\r\n  };\r\n};\r\n\r\nconst Board = () => {\r\n  const [begin, setBegin] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [name, setName] = useState('')\r\n  const [chance, setChance] = useState(0.8);\r\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\r\n  const [snake, setSnake] = useState(\r\n    new LinkedList(getStartingSnakeLLValue(board))\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState(\r\n    new Set([snake.head.value.cell])\r\n  );\r\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\r\n  const [direction, setDirection] = useState(Direction.RIGHT);\r\n  const [speed, setSpeed] = useState(150);\r\n  const [menu, setMenu] = useState(false);\r\n  const [speedIncreases, setSpeedIncreases] = useState(0);\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (!menu) {\r\n        handleKeydown(e);\r\n      }\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (score >= 50 * (speedIncreases + 1)) {\r\n      setSpeedIncreases((prev) => prev + 1);\r\n      setSpeed((prev) => {\r\n        if (prev > 50) {\r\n          return prev - 20;\r\n        }\r\n      });\r\n    }\r\n    if (score == 0) {\r\n      setSpeed(150);\r\n      setSpeedIncreases(0);\r\n    }\r\n  }, [score, speedIncreases]);\r\n  useInterval(() => {\r\n    if (!menu) {\r\n      moveSnake();\r\n    }\r\n  }, speed);\r\n\r\n  const handleKeydown = (e) => {\r\n    const newDirection = getDirectionFromKey(e.key);\r\n    const isValidDirection = newDirection !== \"\";\r\n    if (!isValidDirection) return;\r\n    const snakeWillRunIntoItself =\r\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\r\n\r\n    if (snakeWillRunIntoItself) return;\r\n    setDirection(newDirection);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (begin) {\r\n      const currentHeadCoords = {\r\n        row: snake.head.value.row,\r\n        col: snake.head.value.col,\r\n      };\r\n\r\n      const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\r\n      if (isOutOfBounds(nextHeadCoords, board)) {\r\n        handleGameOver();\r\n        return;\r\n      }\r\n      const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n      if (snakeCells.has(nextHeadCell)) {\r\n        handleGameOver();\r\n        return;\r\n      }\r\n\r\n      const newHead = new LinkedListNode({\r\n        row: nextHeadCoords.row,\r\n        col: nextHeadCoords.col,\r\n        cell: nextHeadCell,\r\n      });\r\n      const currentHead = snake.head;\r\n      snake.head = newHead;\r\n      currentHead.next = newHead;\r\n\r\n      const newSnakeCells = new Set(snakeCells);\r\n      newSnakeCells.delete(snake.tail.value.cell);\r\n      newSnakeCells.add(nextHeadCell);\r\n\r\n      snake.tail = snake.tail.next;\r\n      if (snake.tail === null) snake.tail = snake.head;\r\n\r\n      const foodConsumed = nextHeadCell === foodCell;\r\n      if (foodConsumed) {\r\n        growSnake(newSnakeCells);\r\n        handleFoodConsumption(newSnakeCells);\r\n      }\r\n\r\n      setSnakeCells(newSnakeCells);\r\n    }\r\n  };\r\n\r\n  const growSnake = (newSnakeCells) => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n  const handleFoodConsumption = (newSnakeCells) => {\r\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\r\n    let nextFoodCell;\r\n\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setChance(Math.random());\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      setScore(score + 5);\r\n    } else if (chance < 0.05) {\r\n      setScore(score + 10);\r\n    } else {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    setMenu(true);\r\n  };\r\n\r\n  const resumeGame = () => {\r\n    setMenu(false);\r\n    setScore(0);\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  };\r\n  const beginGame = () => {\r\n    if (name === '') {\r\n      alert('Enter')\r\n    }\r\n    else {\r\n      setBegin(true);\r\n\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {!menu && <h1>Score: {score}</h1>}\r\n      <div className=\"board\">\r\n        <div className=\"board-game\">\r\n          {board.map((row, rowIdx) => (\r\n            <div key={rowIdx} className=\"row\">\r\n              {row.map((cellValue, cellIdx) => {\r\n                const className = getCellClassName(\r\n                  cellValue,\r\n                  foodCell,\r\n                  snakeCells,\r\n                  score,\r\n                  chance\r\n                );\r\n                return <div key={cellIdx} className={className}></div>;\r\n              })}\r\n            </div>\r\n          ))}\r\n          {!begin && (\r\n            <div className='begin-menu'>\r\n            <div className='begin-menu-score'>\r\n              <input placeholder='Enter your name' onChange={(e) => setName(e.target.value)} />\r\n              <button className='begin-menu-score-btn' onClick={beginGame}>Start game</button>\r\n            </div>\r\n          </div>\r\n          )}\r\n        </div>\r\n        {menu && (\r\n          <div className=\"board-menu\">\r\n            <div className=\"board-menu-score\">\r\n              <div>\r\n\r\n              <h1 className=\"board-menu-score-title\">{name}</h1>\r\n              <h1 className=\"board-menu-score-title\">Your Result: {score}</h1>\r\n              </div>\r\n              <button className=\"board-menu-score-btn\" onClick={resumeGame}>\r\n                Try again\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nconst getCoordsInDirection = (coords, direction) => {\r\n  if (direction === Direction.UP) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.RIGHT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.DOWN) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.LEFT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n};\r\n\r\nconst isOutOfBounds = (coords, board) => {\r\n  const { row, col } = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n  return false;\r\n};\r\n\r\nconst getDirectionFromKey = (key) => {\r\n  if (key === \"ArrowUp\") return Direction.UP;\r\n  if (key === \"ArrowRight\") return Direction.RIGHT;\r\n  if (key === \"ArrowDown\") return Direction.DOWN;\r\n  if (key === \"ArrowLeft\") return Direction.LEFT;\r\n  return \"\";\r\n};\r\n\r\nconst getNextNodeDirection = (node, currentDirection) => {\r\n  if (node.next === null) return currentDirection;\r\n  const { row: currentRow, col: currentCol } = node.value;\r\n  const { row: nextRow, col: nextCol } = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.RIGHT;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.LEFT;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.DOWN;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.UP;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nconst getOppositeDirection = (direction) => {\r\n  if (direction === Direction.UP) return Direction.DOWN;\r\n  if (direction === Direction.RIGHT) return Direction.LEFT;\r\n  if (direction === Direction.DOWN) return Direction.UP;\r\n  if (direction === Direction.LEFT) return Direction.RIGHT;\r\n};\r\n\r\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\r\n  let className = \"cell\";\r\n  if (cellValue === foodCell) {\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      className = \"cell cell-purple\";\r\n    } else if (chance < 0.05) {\r\n      className = \"cell cell-blue\";\r\n    } else {\r\n      className = \"cell cell-red\";\r\n    }\r\n  }\r\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\r\n\r\n  return className;\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}