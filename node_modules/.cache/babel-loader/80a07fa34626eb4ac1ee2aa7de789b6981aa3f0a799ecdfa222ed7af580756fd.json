{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\"\n};\nconst BOARD_SIZE = 20;\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell\n  };\n};\nconst Board = () => {\n  _s();\n  const [begin, setBegin] = useState(false);\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [pause, setPause] = useState(false);\n  const [chance, setChance] = useState(0.8);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(new LinkedList(getStartingSnakeLLValue(board)));\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value.cell]));\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [speed, setSpeed] = useState(150);\n  const [menu, setMenu] = useState(false);\n  const [speedIncreases, setSpeedIncreases] = useState(0);\n  const [leaderboard, setLeaderboard] = useState([]);\n  useEffect(() => {\n    // async function test() {\n    //   for (let i = 1; i < 2000; i++) {\n    //     await fetch(`http://localhost:4000/deleteuser/${i}`, {\n    //       method: \"DELETE\",\n    //     });\n    //   }\n    // }\n    // test();\n    window.addEventListener(\"keydown\", e => {\n      if (!menu) {\n        handleKeydown(e);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (score >= 50 * (speedIncreases + 1)) {\n      setSpeedIncreases(prev => prev + 1);\n      setSpeed(prev => {\n        if (prev > 50) {\n          return prev - 20;\n        }\n      });\n    }\n    if (score == 0) {\n      setSpeed(150);\n      setSpeedIncreases(0);\n    }\n  }, [score, speedIncreases]);\n  useInterval(() => {\n    if (!menu) {\n      moveSnake();\n    }\n  }, speed);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", pauseKeydown);\n    return () => {\n      window.removeEventListener(\"keydown\", pauseKeydown);\n    };\n  }, [begin, menu]);\n  const pauseKeydown = e => {\n    if (e.key === \"p\" && begin && !menu) {\n      setPause(prev => !prev);\n    }\n  };\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== \"\";\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself = getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n  const moveSnake = () => {\n    if (begin) {\n      if (!pause) {\n        const currentHeadCoords = {\n          row: snake.head.value.row,\n          col: snake.head.value.col\n        };\n        const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n        if (isOutOfBounds(nextHeadCoords, board)) {\n          handleGameOver();\n          return;\n        }\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n        if (snakeCells.has(nextHeadCell)) {\n          handleGameOver();\n          return;\n        }\n        const newHead = new LinkedListNode({\n          row: nextHeadCoords.row,\n          col: nextHeadCoords.col,\n          cell: nextHeadCell\n        });\n        const currentHead = snake.head;\n        snake.head = newHead;\n        currentHead.next = newHead;\n        const newSnakeCells = new Set(snakeCells);\n        newSnakeCells.delete(snake.tail.value.cell);\n        newSnakeCells.add(nextHeadCell);\n        snake.tail = snake.tail.next;\n        if (snake.tail === null) snake.tail = snake.head;\n        const foodConsumed = nextHeadCell === foodCell;\n        if (foodConsumed) {\n          growSnake(newSnakeCells);\n          handleFoodConsumption(newSnakeCells);\n        }\n        setSnakeCells(newSnakeCells);\n      }\n    }\n  };\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  };\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n      break;\n    }\n    setFoodCell(nextFoodCell);\n    setChance(Math.random());\n    if (chance > 0.05 && chance < 0.2) {\n      setScore(score + 5);\n    } else if (chance < 0.05) {\n      setScore(score + 10);\n    } else {\n      setScore(score + 1);\n    }\n  };\n  const handleGameOver = async () => {\n    setMenu(true);\n    await sendResult();\n    await fetchLeaderBoard();\n  };\n  const sendResult = async () => {\n    const playerData = {\n      player_name: name,\n      score: score\n    };\n    const response = await fetch(\"http://localhost:4000/adduser\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(playerData)\n    });\n    if (!response.ok) {\n      console.error(\"Error sending data\");\n    }\n  };\n  useEffect(() => {\n    fetchLeaderBoard();\n  }, []);\n  async function fetchLeaderBoard() {\n    const response = await fetch(\"http://localhost:4000/adduser\");\n    if (response.ok) {\n      const data = await response.json();\n      setLeaderboard(data);\n    } else {\n      console.error(\"Error fetching leaderboard data\");\n    }\n  }\n  const resumeGame = () => {\n    setMenu(false);\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  const beginGame = () => {\n    if (name === \"\" || name.length > 10) {\n      setTimeout(() => {\n        alert(\"Please enter your name (max char(10))\");\n      }, 310);\n    } else {\n      setBegin(true);\n    }\n  };\n  const pauseValid = () => {\n    if (begin && !menu) {\n      setPause(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-pause\",\n      onClick: pauseValid,\n      children: `Pause (P)`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-game\",\n          children: [board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(cellValue, foodCell, snakeCells, score, chance);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: className\n              }, cellIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 26\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)), !begin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"begin-menu\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"begin-menu-score\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Enter your name\",\n                onChange: e => setName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"begin-menu-score-btn\",\n                onClick: beginGame,\n                children: \"Start game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), menu && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-menu\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-menu-score\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"board-menu-score-title\",\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"board-menu-score-title\",\n                children: [\"Your Result: \", score]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"board-menu-score-btn\",\n              onClick: resumeGame,\n              children: \"Try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), !menu && begin && pause && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pause-menu\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pause-menu-score\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"pause-menu-score-title\",\n                children: \"Game is Paused\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-pause\",\n              onClick: () => setPause(false),\n              children: \"Resume Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboar-top\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"leaderboar-top-title\",\n            children: \"Leaderboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboar-bottom\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboard-bottom-item orange\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"leaderboard-item-gap\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Rank\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), leaderboard.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboard-bottom-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"leaderboard-item-gap\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: item.player_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.score\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Board, \"dP91o6NODl+paY+0NTUsc9jDFXQ=\", false, function () {\n  return [useInterval];\n});\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1\n    };\n  }\n};\nconst isOutOfBounds = (coords, board) => {\n  const {\n    row,\n    col\n  } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\nconst getDirectionFromKey = key => {\n  if (key === \"ArrowUp\") return Direction.UP;\n  if (key === \"ArrowRight\") return Direction.RIGHT;\n  if (key === \"ArrowDown\") return Direction.DOWN;\n  if (key === \"ArrowLeft\") return Direction.LEFT;\n  return \"\";\n};\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {\n    row: currentRow,\n    col: currentCol\n  } = node.value;\n  const {\n    row: nextRow,\n    col: nextCol\n  } = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return \"\";\n};\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(snakeTail, currentDirection);\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col\n  };\n  const growthNodeCoords = getCoordsInDirection(currentTailCoords, growthDirection);\n  return growthNodeCoords;\n};\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\n  let className = \"cell\";\n  if (cellValue === foodCell) {\n    if (chance > 0.05 && chance < 0.2) {\n      className = \"cell cell-purple\";\n    } else if (chance < 0.05) {\n      className = \"cell cell-blue\";\n    } else {\n      className = \"cell cell-red\";\n    }\n  }\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","randomIntFromInterval","useInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedListNode","constructor","value","next","LinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","BOARD_SIZE","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","startingCell","row","col","cell","Board","_s","begin","setBegin","score","setScore","name","setName","pause","setPause","chance","setChance","setBoard","createBoard","snake","setSnake","snakeCells","setSnakeCells","Set","foodCell","setFoodCell","direction","setDirection","speed","setSpeed","menu","setMenu","speedIncreases","setSpeedIncreases","leaderboard","setLeaderboard","window","addEventListener","e","handleKeydown","prev","moveSnake","pauseKeydown","removeEventListener","key","newDirection","getDirectionFromKey","isValidDirection","snakeWillRunIntoItself","getOppositeDirection","size","currentHeadCoords","nextHeadCoords","getCoordsInDirection","isOutOfBounds","handleGameOver","nextHeadCell","has","newHead","currentHead","newSnakeCells","delete","add","foodConsumed","growSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","currentTail","maxPossibleCellValue","nextFoodCell","random","sendResult","fetchLeaderBoard","playerData","player_name","response","fetch","method","headers","body","JSON","stringify","ok","console","error","data","json","resumeGame","snakeLLStartingValue","beginGame","setTimeout","alert","pauseValid","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","rowIdx","cellValue","cellIdx","getCellClassName","placeholder","onChange","target","item","index","id","_c","counter","currentRow","push","coords","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","snakeTail","tailNextNodeDirection","growthDirection","currentTailCoords","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\r\n\r\nimport \"./Board.css\";\r\n\r\nclass LinkedListNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor(value) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n\r\nconst Direction = {\r\n  UP: \"UP\",\r\n  RIGHT: \"RIGHT\",\r\n  DOWN: \"DOWN\",\r\n  LEFT: \"LEFT\",\r\n};\r\n\r\nconst BOARD_SIZE = 20;\r\n\r\nconst getStartingSnakeLLValue = (board) => {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n  const startingRow = Math.round(rowSize / 3);\r\n  const startingCol = Math.round(colSize / 3);\r\n  const startingCell = board[startingRow][startingCol];\r\n  return {\r\n    row: startingRow,\r\n    col: startingCol,\r\n    cell: startingCell,\r\n  };\r\n};\r\n\r\nconst Board = () => {\r\n  const [begin, setBegin] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [pause, setPause] = useState(false);\r\n  const [chance, setChance] = useState(0.8);\r\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\r\n  const [snake, setSnake] = useState(\r\n    new LinkedList(getStartingSnakeLLValue(board))\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState(\r\n    new Set([snake.head.value.cell])\r\n  );\r\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\r\n  const [direction, setDirection] = useState(Direction.RIGHT);\r\n  const [speed, setSpeed] = useState(150);\r\n  const [menu, setMenu] = useState(false);\r\n  const [speedIncreases, setSpeedIncreases] = useState(0);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  useEffect(() => {\r\n    // async function test() {\r\n    //   for (let i = 1; i < 2000; i++) {\r\n    //     await fetch(`http://localhost:4000/deleteuser/${i}`, {\r\n    //       method: \"DELETE\",\r\n    //     });\r\n    //   }\r\n    // }\r\n    // test();\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (!menu) {\r\n        handleKeydown(e);\r\n      }\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (score >= 50 * (speedIncreases + 1)) {\r\n      setSpeedIncreases((prev) => prev + 1);\r\n      setSpeed((prev) => {\r\n        if (prev > 50) {\r\n          return prev - 20;\r\n        }\r\n      });\r\n    }\r\n    if (score == 0) {\r\n      setSpeed(150);\r\n      setSpeedIncreases(0);\r\n    }\r\n  }, [score, speedIncreases]);\r\n  useInterval(() => {\r\n    if (!menu) {\r\n      moveSnake();\r\n    }\r\n  }, speed);\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", pauseKeydown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", pauseKeydown);\r\n    };\r\n  }, [begin, menu]);\r\n\r\n  const pauseKeydown = (e) => {\r\n    if (e.key === \"p\" && begin && !menu) {\r\n      setPause((prev) => !prev);\r\n    }\r\n  };\r\n\r\n  const handleKeydown = (e) => {\r\n    const newDirection = getDirectionFromKey(e.key);\r\n    const isValidDirection = newDirection !== \"\";\r\n    if (!isValidDirection) return;\r\n    const snakeWillRunIntoItself =\r\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\r\n\r\n    if (snakeWillRunIntoItself) return;\r\n    setDirection(newDirection);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (begin) {\r\n      if (!pause) {\r\n        const currentHeadCoords = {\r\n          row: snake.head.value.row,\r\n          col: snake.head.value.col,\r\n        };\r\n\r\n        const nextHeadCoords = getCoordsInDirection(\r\n          currentHeadCoords,\r\n          direction\r\n        );\r\n        if (isOutOfBounds(nextHeadCoords, board)) {\r\n          handleGameOver();\r\n          return;\r\n        }\r\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n        if (snakeCells.has(nextHeadCell)) {\r\n          handleGameOver();\r\n          return;\r\n        }\r\n\r\n        const newHead = new LinkedListNode({\r\n          row: nextHeadCoords.row,\r\n          col: nextHeadCoords.col,\r\n          cell: nextHeadCell,\r\n        });\r\n        const currentHead = snake.head;\r\n        snake.head = newHead;\r\n        currentHead.next = newHead;\r\n\r\n        const newSnakeCells = new Set(snakeCells);\r\n        newSnakeCells.delete(snake.tail.value.cell);\r\n        newSnakeCells.add(nextHeadCell);\r\n\r\n        snake.tail = snake.tail.next;\r\n        if (snake.tail === null) snake.tail = snake.head;\r\n\r\n        const foodConsumed = nextHeadCell === foodCell;\r\n        if (foodConsumed) {\r\n          growSnake(newSnakeCells);\r\n          handleFoodConsumption(newSnakeCells);\r\n        }\r\n\r\n        setSnakeCells(newSnakeCells);\r\n      }\r\n    }\r\n  };\r\n\r\n  const growSnake = (newSnakeCells) => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n  const handleFoodConsumption = (newSnakeCells) => {\r\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\r\n    let nextFoodCell;\r\n\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setChance(Math.random());\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      setScore(score + 5);\r\n    } else if (chance < 0.05) {\r\n      setScore(score + 10);\r\n    } else {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleGameOver = async () => {\r\n    setMenu(true);\r\n    await sendResult();\r\n    await fetchLeaderBoard();\r\n  };\r\n\r\n  const sendResult = async () => {\r\n    const playerData = {\r\n      player_name: name,\r\n      score: score,\r\n    };\r\n    const response = await fetch(\"http://localhost:4000/adduser\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(playerData),\r\n    });\r\n    if (!response.ok) {\r\n      console.error(\"Error sending data\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLeaderBoard();\r\n  }, []);\r\n\r\n  async function fetchLeaderBoard() {\r\n    const response = await fetch(\"http://localhost:4000/adduser\");\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      setLeaderboard(data);\r\n    } else {\r\n      console.error(\"Error fetching leaderboard data\");\r\n    }\r\n  }\r\n\r\n  const resumeGame = () => {\r\n    setMenu(false);\r\n    setScore(0);\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  };\r\n  const beginGame = () => {\r\n    if (name === \"\" || name.length > 10) {\r\n      setTimeout(() => {\r\n        alert(\"Please enter your name (max char(10))\");\r\n      }, 310);\r\n    } else {\r\n      setBegin(true);\r\n    }\r\n  };\r\n  const pauseValid = () => {\r\n    if (begin && !menu) {\r\n      setPause(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Score: {score}</h1>\r\n      <button className=\"btn-pause\" onClick={pauseValid}>{`Pause (P)`}</button>\r\n      <div className=\"container\">\r\n        <div className=\"board\">\r\n          <div className=\"board-game\">\r\n            {board.map((row, rowIdx) => (\r\n              <div key={rowIdx} className=\"row\">\r\n                {row.map((cellValue, cellIdx) => {\r\n                  const className = getCellClassName(\r\n                    cellValue,\r\n                    foodCell,\r\n                    snakeCells,\r\n                    score,\r\n                    chance\r\n                  );\r\n                  return <div key={cellIdx} className={className}></div>;\r\n                })}\r\n              </div>\r\n            ))}\r\n            {!begin && (\r\n              <div className=\"begin-menu\">\r\n                <div className=\"begin-menu-score\">\r\n                  <input\r\n                    placeholder=\"Enter your name\"\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                  <button className=\"begin-menu-score-btn\" onClick={beginGame}>\r\n                    Start game\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {menu && (\r\n            <div className=\"board-menu\">\r\n              <div className=\"board-menu-score\">\r\n                <div>\r\n                  <h1 className=\"board-menu-score-title\">{name}</h1>\r\n                  <h1 className=\"board-menu-score-title\">\r\n                    Your Result: {score}\r\n                  </h1>\r\n                </div>\r\n                <button className=\"board-menu-score-btn\" onClick={resumeGame}>\r\n                  Try again\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!menu && begin && pause && (\r\n            <div className=\"pause-menu\">\r\n              <div className=\"pause-menu-score\">\r\n                <div>\r\n                  <h1 className=\"pause-menu-score-title\">Game is Paused</h1>\r\n                </div>\r\n                <button className=\"btn-pause\" onClick={() => setPause(false)}>\r\n                  Resume Game\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"leaderboard\">\r\n          <div className=\"leaderboar-top\">\r\n            <h1 className=\"leaderboar-top-title\">Leaderboard</h1>\r\n          </div>\r\n          <div className=\"leaderboar-bottom\">\r\n            <div className=\"leaderboard-bottom-item orange\">\r\n              <div className=\"leaderboard-item-gap\">\r\n                <p>Rank</p>\r\n                <h3>Name</h3>\r\n              </div>\r\n              <p>Score</p>\r\n            </div>\r\n            {leaderboard.map((item, index) => (\r\n              <div key={item.id} className=\"leaderboard-bottom-item\">\r\n                <div className=\"leaderboard-item-gap\">\r\n                  <p>{index + 1}</p>\r\n                  <h3>{item.player_name}</h3>\r\n                </div>\r\n                <p>{item.score}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nconst getCoordsInDirection = (coords, direction) => {\r\n  if (direction === Direction.UP) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.RIGHT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.DOWN) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.LEFT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n};\r\n\r\nconst isOutOfBounds = (coords, board) => {\r\n  const { row, col } = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n  return false;\r\n};\r\n\r\nconst getDirectionFromKey = (key) => {\r\n  if (key === \"ArrowUp\") return Direction.UP;\r\n  if (key === \"ArrowRight\") return Direction.RIGHT;\r\n  if (key === \"ArrowDown\") return Direction.DOWN;\r\n  if (key === \"ArrowLeft\") return Direction.LEFT;\r\n  return \"\";\r\n};\r\n\r\nconst getNextNodeDirection = (node, currentDirection) => {\r\n  if (node.next === null) return currentDirection;\r\n  const { row: currentRow, col: currentCol } = node.value;\r\n  const { row: nextRow, col: nextCol } = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.RIGHT;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.LEFT;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.DOWN;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.UP;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nconst getOppositeDirection = (direction) => {\r\n  if (direction === Direction.UP) return Direction.DOWN;\r\n  if (direction === Direction.RIGHT) return Direction.LEFT;\r\n  if (direction === Direction.DOWN) return Direction.UP;\r\n  if (direction === Direction.LEFT) return Direction.RIGHT;\r\n};\r\n\r\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\r\n  let className = \"cell\";\r\n  if (cellValue === foodCell) {\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      className = \"cell cell-purple\";\r\n    } else if (chance < 0.05) {\r\n      className = \"cell cell-blue\";\r\n    } else {\r\n      className = \"cell cell-red\";\r\n    }\r\n  }\r\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\r\n\r\n  return className;\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}