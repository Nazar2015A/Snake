{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nconst Direction = {\n  UP: \"UP\",\n  RIGHT: \"RIGHT\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\"\n};\nconst BOARD_SIZE = 20;\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell\n  };\n};\nconst Board = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [begin, setBegin] = useState(false);\n  const [score, setScore] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [pause, setPause] = useState(false);\n  const [chance, setChance] = useState(0.8);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(new LinkedList(getStartingSnakeLLValue(board)));\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value.cell]));\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [speed, setSpeed] = useState(150);\n  const [menu, setMenu] = useState(false);\n  const [speedIncreases, setSpeedIncreases] = useState(0);\n  const [leaderboard, setLeaderboard] = useState([]);\n  async function test() {\n    _s();\n    //   for (let i = 1; i < 100; i++) {\n    //     await fetch(`http://localhost:4000/deleteuser/${i}`, {\n    //       method: \"DELETE\",\n    //     });\n    //   }\n    // }\n    // test();\n    useEffect(() => {\n      window.addEventListener(\"keydown\", e => {\n        if (!menu) {\n          handleKeydown(e);\n        }\n      });\n    }, []);\n    useEffect(() => {\n      if (score >= 50 * (speedIncreases + 1)) {\n        setSpeedIncreases(prev => prev + 1);\n        setSpeed(prev => {\n          if (prev > 50) {\n            return prev - 20;\n          }\n        });\n      }\n      if (score == 0) {\n        setSpeed(150);\n        setSpeedIncreases(0);\n      }\n    }, [score, speedIncreases]);\n    useInterval(() => {\n      if (!menu) {\n        moveSnake();\n      }\n    }, speed);\n    useEffect(() => {\n      window.addEventListener(\"keydown\", pauseKeydown);\n      return () => {\n        window.removeEventListener(\"keydown\", pauseKeydown);\n      };\n    }, [begin, menu]);\n    const pauseKeydown = e => {\n      if (e.key === \"p\" && begin && !menu) {\n        setPause(prev => !prev);\n      }\n    };\n    const handleKeydown = e => {\n      const newDirection = getDirectionFromKey(e.key);\n      const isValidDirection = newDirection !== \"\";\n      if (!isValidDirection) return;\n      const snakeWillRunIntoItself = getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n      if (snakeWillRunIntoItself) return;\n      setDirection(newDirection);\n    };\n    const moveSnake = () => {\n      if (begin) {\n        if (!pause) {\n          const currentHeadCoords = {\n            row: snake.head.value.row,\n            col: snake.head.value.col\n          };\n          const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n          if (isOutOfBounds(nextHeadCoords, board)) {\n            handleGameOver();\n            return;\n          }\n          const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n          if (snakeCells.has(nextHeadCell)) {\n            handleGameOver();\n            return;\n          }\n          const newHead = new LinkedListNode({\n            row: nextHeadCoords.row,\n            col: nextHeadCoords.col,\n            cell: nextHeadCell\n          });\n          const currentHead = snake.head;\n          snake.head = newHead;\n          currentHead.next = newHead;\n          const newSnakeCells = new Set(snakeCells);\n          newSnakeCells.delete(snake.tail.value.cell);\n          newSnakeCells.add(nextHeadCell);\n          snake.tail = snake.tail.next;\n          if (snake.tail === null) snake.tail = snake.head;\n          const foodConsumed = nextHeadCell === foodCell;\n          if (foodConsumed) {\n            growSnake(newSnakeCells);\n            handleFoodConsumption(newSnakeCells);\n          }\n          setSnakeCells(newSnakeCells);\n        }\n      }\n    };\n    const growSnake = newSnakeCells => {\n      const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n      if (isOutOfBounds(growthNodeCoords, board)) {\n        return;\n      }\n      const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n      const newTail = new LinkedListNode({\n        row: growthNodeCoords.row,\n        col: growthNodeCoords.col,\n        cell: newTailCell\n      });\n      const currentTail = snake.tail;\n      snake.tail = newTail;\n      snake.tail.next = currentTail;\n      newSnakeCells.add(newTailCell);\n    };\n    const handleFoodConsumption = newSnakeCells => {\n      const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n      let nextFoodCell;\n      while (true) {\n        nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n        if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n        break;\n      }\n      setFoodCell(nextFoodCell);\n      setChance(Math.random());\n      if (chance > 0.05 && chance < 0.2) {\n        setScore(score + 5);\n      } else if (chance < 0.05) {\n        setScore(score + 10);\n      } else {\n        setScore(score + 1);\n      }\n    };\n    const handleGameOver = async () => {\n      setMenu(true);\n      await sendResult();\n      fetchLeaderBoard();\n    };\n    const sendResult = async () => {\n      const playerData = {\n        player_name: name,\n        score: score\n      };\n      await fetch(\"http://localhost:4000/adduser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(playerData)\n      });\n    };\n    useEffect(() => {\n      fetchLeaderBoard();\n    }, []);\n    async function fetchLeaderBoard() {\n      const response = await fetch(\"http://localhost:4000/adduser\");\n      const data = await response.json();\n      setLeaderboard(data);\n      console.log(data);\n    }\n    const resumeGame = () => {\n      setMenu(false);\n      setScore(0);\n      const snakeLLStartingValue = getStartingSnakeLLValue(board);\n      setSnake(new LinkedList(snakeLLStartingValue));\n      setFoodCell(snakeLLStartingValue.cell + 5);\n      setSnakeCells(new Set([snakeLLStartingValue.cell]));\n      setDirection(Direction.RIGHT);\n    };\n    const beginGame = () => {\n      if (name === \"\") {\n        setTimeout(() => {\n          alert(\"Please enter your name\");\n        }, 310);\n      } else {\n        setBegin(true);\n      }\n    };\n    const pauseValid = () => {\n      if (begin && !menu) {\n        setPause(true);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-pause\",\n        onClick: pauseValid,\n        children: `Pause (P)`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-game\",\n          children: [board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(cellValue, foodCell, snakeCells, score, chance);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: className\n              }, cellIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 24\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)), !begin && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"begin-menu\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"begin-menu-score\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Enter your name\",\n                onChange: e => setName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"begin-menu-score-btn\",\n                onClick: beginGame,\n                children: \"Start game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }, this), menu && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-menu\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-menu-score\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"board-menu-score-title\",\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"board-menu-score-title\",\n                children: [\"Your Result: \", score]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"board-menu-score-btn\",\n              onClick: resumeGame,\n              children: \"Try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), !menu && begin && pause && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pause-menu\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pause-menu-score\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"pause-menu-score-title\",\n                children: \"Game is Paused\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn-pause\",\n              onClick: () => setPause(false),\n              children: \"Resume Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboard\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboar-top\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboar-bottom\",\n            children: leaderboard.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"leaderboard-bottom-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: item.player_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: item.score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n  _s(test, \"oT5V8JYNJid/51jmsi1MD0x+kMo=\", false, function () {\n    return [useInterval];\n  });\n  ;\n  const createBoard = BOARD_SIZE => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      const currentRow = [];\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        currentRow.push(counter++);\n      }\n      board.push(currentRow);\n    }\n    return board;\n  };\n  const getCoordsInDirection = (coords, direction) => {\n    if (direction === Direction.UP) {\n      return {\n        row: coords.row - 1,\n        col: coords.col\n      };\n    }\n    if (direction === Direction.RIGHT) {\n      return {\n        row: coords.row,\n        col: coords.col + 1\n      };\n    }\n    if (direction === Direction.DOWN) {\n      return {\n        row: coords.row + 1,\n        col: coords.col\n      };\n    }\n    if (direction === Direction.LEFT) {\n      return {\n        row: coords.row,\n        col: coords.col - 1\n      };\n    }\n  };\n  const isOutOfBounds = (coords, board) => {\n    const {\n      row,\n      col\n    } = coords;\n    if (row < 0 || col < 0) return true;\n    if (row >= board.length || col >= board[0].length) return true;\n    return false;\n  };\n  const getDirectionFromKey = key => {\n    if (key === \"ArrowUp\") return Direction.UP;\n    if (key === \"ArrowRight\") return Direction.RIGHT;\n    if (key === \"ArrowDown\") return Direction.DOWN;\n    if (key === \"ArrowLeft\") return Direction.LEFT;\n    return \"\";\n  };\n  const getNextNodeDirection = (node, currentDirection) => {\n    if (node.next === null) return currentDirection;\n    const {\n      row: currentRow,\n      col: currentCol\n    } = node.value;\n    const {\n      row: nextRow,\n      col: nextCol\n    } = node.next.value;\n    if (nextRow === currentRow && nextCol === currentCol + 1) {\n      return Direction.RIGHT;\n    }\n    if (nextRow === currentRow && nextCol === currentCol - 1) {\n      return Direction.LEFT;\n    }\n    if (nextCol === currentCol && nextRow === currentRow + 1) {\n      return Direction.DOWN;\n    }\n    if (nextCol === currentCol && nextRow === currentRow - 1) {\n      return Direction.UP;\n    }\n    return \"\";\n  };\n  const getGrowthNodeCoords = (snakeTail, currentDirection) => {\n    const tailNextNodeDirection = getNextNodeDirection(snakeTail, currentDirection);\n    const growthDirection = getOppositeDirection(tailNextNodeDirection);\n    const currentTailCoords = {\n      row: snakeTail.value.row,\n      col: snakeTail.value.col\n    };\n    const growthNodeCoords = getCoordsInDirection(currentTailCoords, growthDirection);\n    return growthNodeCoords;\n  };\n  const getOppositeDirection = direction => {\n    if (direction === Direction.UP) return Direction.DOWN;\n    if (direction === Direction.RIGHT) return Direction.LEFT;\n    if (direction === Direction.DOWN) return Direction.UP;\n    if (direction === Direction.LEFT) return Direction.RIGHT;\n  };\n  const getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\n    let className = \"cell\";\n    if (cellValue === foodCell) {\n      if (chance > 0.05 && chance < 0.2) {\n        className = \"cell cell-purple\";\n      } else if (chance < 0.05) {\n        className = \"cell cell-blue\";\n      } else {\n        className = \"cell cell-red\";\n      }\n    }\n    if (snakeCells.has(cellValue)) className = \"cell cell-green\";\n    return className;\n  };\n};\n_s2(Board, \"JknX5+5BwT1BZ9gNdAmZJ2AeKu8=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","randomIntFromInterval","useInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedListNode","constructor","value","next","LinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","BOARD_SIZE","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","startingCell","row","col","cell","Board","_s2","_s","$RefreshSig$","begin","setBegin","score","setScore","name","setName","pause","setPause","chance","setChance","setBoard","createBoard","snake","setSnake","snakeCells","setSnakeCells","Set","foodCell","setFoodCell","direction","setDirection","speed","setSpeed","menu","setMenu","speedIncreases","setSpeedIncreases","leaderboard","setLeaderboard","test","window","addEventListener","e","handleKeydown","prev","moveSnake","pauseKeydown","removeEventListener","key","newDirection","getDirectionFromKey","isValidDirection","snakeWillRunIntoItself","getOppositeDirection","size","currentHeadCoords","nextHeadCoords","getCoordsInDirection","isOutOfBounds","handleGameOver","nextHeadCell","has","newHead","currentHead","newSnakeCells","delete","add","foodConsumed","growSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","currentTail","maxPossibleCellValue","nextFoodCell","random","sendResult","fetchLeaderBoard","playerData","player_name","fetch","method","headers","body","JSON","stringify","response","data","json","console","log","resumeGame","snakeLLStartingValue","beginGame","setTimeout","alert","pauseValid","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","rowIdx","cellValue","cellIdx","getCellClassName","placeholder","onChange","target","item","id","counter","currentRow","push","coords","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","snakeTail","tailNextNodeDirection","growthDirection","currentTailCoords","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { randomIntFromInterval, useInterval } from \"../../utils/utils\";\r\n\r\nimport \"./Board.css\";\r\n\r\nclass LinkedListNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor(value) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n\r\nconst Direction = {\r\n  UP: \"UP\",\r\n  RIGHT: \"RIGHT\",\r\n  DOWN: \"DOWN\",\r\n  LEFT: \"LEFT\",\r\n};\r\n\r\nconst BOARD_SIZE = 20;\r\n\r\nconst getStartingSnakeLLValue = (board) => {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n  const startingRow = Math.round(rowSize / 3);\r\n  const startingCol = Math.round(colSize / 3);\r\n  const startingCell = board[startingRow][startingCol];\r\n  return {\r\n    row: startingRow,\r\n    col: startingCol,\r\n    cell: startingCell,\r\n  };\r\n};\r\n\r\nconst Board = () => {\r\n  const [begin, setBegin] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [pause, setPause] = useState(false);\r\n  const [chance, setChance] = useState(0.8);\r\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\r\n  const [snake, setSnake] = useState(\r\n    new LinkedList(getStartingSnakeLLValue(board))\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState(\r\n    new Set([snake.head.value.cell])\r\n  );\r\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\r\n  const [direction, setDirection] = useState(Direction.RIGHT);\r\n  const [speed, setSpeed] = useState(150);\r\n  const [menu, setMenu] = useState(false);\r\n  const [speedIncreases, setSpeedIncreases] = useState(0);\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n\r\n  async function test() {\r\n  //   for (let i = 1; i < 100; i++) {\r\n  //     await fetch(`http://localhost:4000/deleteuser/${i}`, {\r\n  //       method: \"DELETE\",\r\n  //     });\r\n  //   }\r\n  // }\r\n  // test();\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (!menu) {\r\n        handleKeydown(e);\r\n      }\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (score >= 50 * (speedIncreases + 1)) {\r\n      setSpeedIncreases((prev) => prev + 1);\r\n      setSpeed((prev) => {\r\n        if (prev > 50) {\r\n          return prev - 20;\r\n        }\r\n      });\r\n    }\r\n    if (score == 0) {\r\n      setSpeed(150);\r\n      setSpeedIncreases(0);\r\n    }\r\n  }, [score, speedIncreases]);\r\n  useInterval(() => {\r\n    if (!menu) {\r\n      moveSnake();\r\n    }\r\n  }, speed);\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", pauseKeydown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", pauseKeydown);\r\n    };\r\n  }, [begin, menu]);\r\n\r\n  const pauseKeydown = (e) => {\r\n    if (e.key === \"p\" && begin && !menu) {\r\n      setPause((prev) => !prev);\r\n    }\r\n  };\r\n\r\n  const handleKeydown = (e) => {\r\n    const newDirection = getDirectionFromKey(e.key);\r\n    const isValidDirection = newDirection !== \"\";\r\n    if (!isValidDirection) return;\r\n    const snakeWillRunIntoItself =\r\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\r\n\r\n    if (snakeWillRunIntoItself) return;\r\n    setDirection(newDirection);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    if (begin) {\r\n      if (!pause) {\r\n        const currentHeadCoords = {\r\n          row: snake.head.value.row,\r\n          col: snake.head.value.col,\r\n        };\r\n\r\n        const nextHeadCoords = getCoordsInDirection(\r\n          currentHeadCoords,\r\n          direction\r\n        );\r\n        if (isOutOfBounds(nextHeadCoords, board)) {\r\n          handleGameOver();\r\n          return;\r\n        }\r\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n        if (snakeCells.has(nextHeadCell)) {\r\n          handleGameOver();\r\n          return;\r\n        }\r\n\r\n        const newHead = new LinkedListNode({\r\n          row: nextHeadCoords.row,\r\n          col: nextHeadCoords.col,\r\n          cell: nextHeadCell,\r\n        });\r\n        const currentHead = snake.head;\r\n        snake.head = newHead;\r\n        currentHead.next = newHead;\r\n\r\n        const newSnakeCells = new Set(snakeCells);\r\n        newSnakeCells.delete(snake.tail.value.cell);\r\n        newSnakeCells.add(nextHeadCell);\r\n\r\n        snake.tail = snake.tail.next;\r\n        if (snake.tail === null) snake.tail = snake.head;\r\n\r\n        const foodConsumed = nextHeadCell === foodCell;\r\n        if (foodConsumed) {\r\n          growSnake(newSnakeCells);\r\n          handleFoodConsumption(newSnakeCells);\r\n        }\r\n\r\n        setSnakeCells(newSnakeCells);\r\n      }\r\n    }\r\n  };\r\n\r\n  const growSnake = (newSnakeCells) => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n  const handleFoodConsumption = (newSnakeCells) => {\r\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\r\n    let nextFoodCell;\r\n\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setChance(Math.random());\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      setScore(score + 5);\r\n    } else if (chance < 0.05) {\r\n      setScore(score + 10);\r\n    } else {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleGameOver = async () => {\r\n    setMenu(true);\r\n    await sendResult();\r\n    fetchLeaderBoard();\r\n  };\r\n\r\n  const sendResult = async () => {\r\n    const playerData = {\r\n      player_name: name,\r\n      score: score,\r\n    };\r\n    await fetch(\"http://localhost:4000/adduser\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(playerData),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLeaderBoard();\r\n  }, []);\r\n\r\n  async function fetchLeaderBoard() {\r\n    const response = await fetch(\"http://localhost:4000/adduser\");\r\n    const data = await response.json();\r\n    setLeaderboard(data);\r\n    console.log(data);\r\n  }\r\n\r\n  const resumeGame = () => {\r\n    setMenu(false);\r\n    setScore(0);\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  };\r\n  const beginGame = () => {\r\n    if (name === \"\") {\r\n      setTimeout(() => {\r\n        alert(\"Please enter your name\");\r\n      }, 310);\r\n    } else {\r\n      setBegin(true);\r\n    }\r\n  };\r\n  const pauseValid = () => {\r\n    if (begin && !menu) {\r\n      setPause(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Score: {score}</h1>\r\n      <button className=\"btn-pause\" onClick={pauseValid}>{`Pause (P)`}</button>\r\n      <div className=\"board\">\r\n        <div className=\"board-game\">\r\n          {board.map((row, rowIdx) => (\r\n            <div key={rowIdx} className=\"row\">\r\n              {row.map((cellValue, cellIdx) => {\r\n                const className = getCellClassName(\r\n                  cellValue,\r\n                  foodCell,\r\n                  snakeCells,\r\n                  score,\r\n                  chance\r\n                );\r\n                return <div key={cellIdx} className={className}></div>;\r\n              })}\r\n            </div>\r\n          ))}\r\n          {!begin && (\r\n            <div className=\"begin-menu\">\r\n              <div className=\"begin-menu-score\">\r\n                <input\r\n                  placeholder=\"Enter your name\"\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n                <button className=\"begin-menu-score-btn\" onClick={beginGame}>\r\n                  Start game\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {menu && (\r\n          <div className=\"board-menu\">\r\n            <div className=\"board-menu-score\">\r\n              <div>\r\n                <h1 className=\"board-menu-score-title\">{name}</h1>\r\n                <h1 className=\"board-menu-score-title\">Your Result: {score}</h1>\r\n              </div>\r\n              <button className=\"board-menu-score-btn\" onClick={resumeGame}>\r\n                Try again\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!menu && begin && pause && (\r\n          <div className=\"pause-menu\">\r\n            <div className=\"pause-menu-score\">\r\n              <div>\r\n                <h1 className=\"pause-menu-score-title\">Game is Paused</h1>\r\n              </div>\r\n              <button className=\"btn-pause\" onClick={() => setPause(false)}>\r\n                Resume Game\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"leaderboard\">\r\n          <div className=\"leaderboar-top\"></div>\r\n          <div className=\"leaderboar-bottom\">\r\n            {leaderboard.map((item) => (\r\n              <div key={item.id} className=\"leaderboard-bottom-item\">\r\n                <h1>{item.player_name}</h1>\r\n                <p>{item.score}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst createBoard = (BOARD_SIZE) => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nconst getCoordsInDirection = (coords, direction) => {\r\n  if (direction === Direction.UP) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.RIGHT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.DOWN) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.LEFT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n};\r\n\r\nconst isOutOfBounds = (coords, board) => {\r\n  const { row, col } = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n  return false;\r\n};\r\n\r\nconst getDirectionFromKey = (key) => {\r\n  if (key === \"ArrowUp\") return Direction.UP;\r\n  if (key === \"ArrowRight\") return Direction.RIGHT;\r\n  if (key === \"ArrowDown\") return Direction.DOWN;\r\n  if (key === \"ArrowLeft\") return Direction.LEFT;\r\n  return \"\";\r\n};\r\n\r\nconst getNextNodeDirection = (node, currentDirection) => {\r\n  if (node.next === null) return currentDirection;\r\n  const { row: currentRow, col: currentCol } = node.value;\r\n  const { row: nextRow, col: nextCol } = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.RIGHT;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.LEFT;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.DOWN;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.UP;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nconst getOppositeDirection = (direction) => {\r\n  if (direction === Direction.UP) return Direction.DOWN;\r\n  if (direction === Direction.RIGHT) return Direction.LEFT;\r\n  if (direction === Direction.DOWN) return Direction.UP;\r\n  if (direction === Direction.LEFT) return Direction.RIGHT;\r\n};\r\n\r\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\r\n  let className = \"cell\";\r\n  if (cellValue === foodCell) {\r\n    if (chance > 0.05 && chance < 0.2) {\r\n      className = \"cell cell-purple\";\r\n    } else if (chance < 0.05) {\r\n      className = \"cell cell-blue\";\r\n    } else {\r\n      className = \"cell cell-red\";\r\n    }\r\n  }\r\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\r\n\r\n  return className;\r\n};\r\n}\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}