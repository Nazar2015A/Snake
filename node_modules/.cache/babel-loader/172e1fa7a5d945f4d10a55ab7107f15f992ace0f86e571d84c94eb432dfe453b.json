{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { randomIntFromInterval, useInterval } from '../../utils/utils';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT'\n};\nconst BOARD_SIZE = 20;\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell\n  };\n};\nconst Board = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [chance, setChance] = useState(5);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(new LinkedList(getStartingSnakeLLValue(board)));\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value.cell]));\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [speed, setSpeed] = useState(150);\n  const [menu, setMenu] = useState(false);\n  const [speedIncreases, setSpeedIncreases] = useState(0);\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      if (!menu) {\n        handleKeydown(e);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (score > 50 * (speedIncreases + 1)) {\n      setSpeedIncreases(prev => prev + 1);\n      setSpeed(prev => {\n        if (prev > 50) {\n          return prev - 20;\n        }\n      });\n    }\n  }, [score, speedIncreases]);\n  useInterval(() => {\n    if (!menu) {\n      moveSnake();\n    }\n  }, speed);\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself = getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col\n    };\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.has(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      handleFoodConsumption(newSnakeCells);\n    }\n    setSnakeCells(newSnakeCells);\n  };\n\n  // This function mutates newSnakeCells.\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  };\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n      break;\n    }\n    setFoodCell(nextFoodCell);\n    setChance(Math.random());\n    console.log(chance);\n    if (score % 7 === 0 && score !== 0) {\n      setScore(score + 5);\n    } else if (score % 9 === 0 && score !== 0) {\n      setScore(score + 10);\n    } else {\n      setScore(score + 1);\n    }\n  };\n  const handleGameOver = () => {\n    setMenu(true);\n    setSpeed(150);\n    // const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    // setSnake(new LinkedList(snakeLLStartingValue));\n    // setFoodCell(snakeLLStartingValue.cell + 5);\n    // setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    // setDirection(Direction.RIGHT);\n  };\n\n  const resumeGame = () => {\n    setMenu(false);\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!menu && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [board.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cellValue, cellIdx) => {\n          const className = getCellClassName(cellValue, foodCell, snakeCells, score, chance);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: className\n          }, cellIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 22\n          }, this);\n        })\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)), menu && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-menu\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-menu-score\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"board-menu-score-title\",\n            children: [\"Your Result: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"board-menu-score-btn\",\n            onClick: resumeGame,\n            children: \"Try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Board, \"9YgSxKLlG7sLx/gMYiY5IvPB9w4=\", false, function () {\n  return [useInterval];\n});\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1\n    };\n  }\n};\nconst isOutOfBounds = (coords, board) => {\n  const {\n    row,\n    col\n  } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {\n    row: currentRow,\n    col: currentCol\n  } = node.value;\n  const {\n    row: nextRow,\n    col: nextCol\n  } = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(snakeTail, currentDirection);\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col\n  };\n  const growthNodeCoords = getCoordsInDirection(currentTailCoords, growthDirection);\n  return growthNodeCoords;\n};\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\nconst getCellClassName = (cellValue, foodCell, snakeCells, score, chance) => {\n  let className = 'cell';\n  console.log(chance);\n  if (cellValue === foodCell) {\n    if (score % 7 === 0 && score !== 0) {\n      className = 'cell cell-purple';\n    } else if (score % 19 === 0 && score !== 0) {\n      className = 'cell cell-blue';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useEffect","useState","randomIntFromInterval","useInterval","jsxDEV","_jsxDEV","Fragment","_Fragment","LinkedListNode","constructor","value","next","LinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","BOARD_SIZE","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","startingCell","row","col","cell","Board","_s","score","setScore","chance","setChance","setBoard","createBoard","snake","setSnake","snakeCells","setSnakeCells","Set","foodCell","setFoodCell","direction","setDirection","speed","setSpeed","menu","setMenu","speedIncreases","setSpeedIncreases","window","addEventListener","e","handleKeydown","prev","moveSnake","newDirection","getDirectionFromKey","key","isValidDirection","snakeWillRunIntoItself","getOppositeDirection","size","currentHeadCoords","nextHeadCoords","getCoordsInDirection","isOutOfBounds","handleGameOver","nextHeadCell","has","newHead","currentHead","newSnakeCells","delete","add","foodConsumed","growSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","currentTail","maxPossibleCellValue","nextFoodCell","random","console","log","resumeGame","snakeLLStartingValue","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIdx","cellValue","cellIdx","getCellClassName","onClick","_c","counter","currentRow","push","coords","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","snakeTail","tailNextNodeDirection","growthDirection","currentTailCoords","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n  randomIntFromInterval,\r\n  useInterval,\r\n} from '../../utils/utils';\r\n\r\nimport './Board.css';\r\n\r\nclass LinkedListNode {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor(value) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n\r\nconst Direction = {\r\n  UP: 'UP',\r\n  RIGHT: 'RIGHT',\r\n  DOWN: 'DOWN',\r\n  LEFT: 'LEFT',\r\n};\r\n\r\n\r\nconst BOARD_SIZE = 20;\r\n\r\nconst getStartingSnakeLLValue = board => {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n  const startingRow = Math.round(rowSize / 3);\r\n  const startingCol = Math.round(colSize / 3);\r\n  const startingCell = board[startingRow][startingCol];\r\n  return {\r\n    row: startingRow,\r\n    col: startingCol,\r\n    cell: startingCell,\r\n  };\r\n};\r\n\r\nconst Board = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [chance, setChance] = useState(5)\r\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\r\n  const [snake, setSnake] = useState(\r\n    new LinkedList(getStartingSnakeLLValue(board)),\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState(\r\n    new Set([snake.head.value.cell]),\r\n  );\r\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\r\n  const [direction, setDirection] = useState(Direction.RIGHT);\r\n  const [speed, setSpeed] = useState(150)\r\n  const [menu, setMenu] = useState(false)\r\n  const [speedIncreases, setSpeedIncreases] = useState(0);\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', e => {\r\n      if (!menu) {\r\n        handleKeydown(e);\r\n      }\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (score > 50 * (speedIncreases + 1)) {\r\n      setSpeedIncreases((prev) => prev + 1);\r\n      setSpeed((prev) => {\r\n        if(prev > 50) {\r\n          return prev - 20\r\n        }\r\n      });\r\n    }\r\n  }, [score, speedIncreases]);\r\n  useInterval(() => {\r\n    if (!menu) {\r\n      moveSnake();\r\n    }\r\n  }, speed);\r\n\r\n  const handleKeydown = e => {\r\n    const newDirection = getDirectionFromKey(e.key)\r\n    const isValidDirection = newDirection !== '';\r\n    if (!isValidDirection) return;\r\n    const snakeWillRunIntoItself =\r\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\r\n\r\n    if (snakeWillRunIntoItself) return;\r\n    setDirection(newDirection);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const currentHeadCoords = {\r\n      row: snake.head.value.row,\r\n      col: snake.head.value.col,\r\n    };\r\n\r\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\r\n    if (isOutOfBounds(nextHeadCoords, board)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n    if (snakeCells.has(nextHeadCell)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n\r\n    const newHead = new LinkedListNode({\r\n      row: nextHeadCoords.row,\r\n      col: nextHeadCoords.col,\r\n      cell: nextHeadCell,\r\n    });\r\n    const currentHead = snake.head;\r\n    snake.head = newHead;\r\n    currentHead.next = newHead;\r\n\r\n    const newSnakeCells = new Set(snakeCells);\r\n    newSnakeCells.delete(snake.tail.value.cell);\r\n    newSnakeCells.add(nextHeadCell);\r\n\r\n    snake.tail = snake.tail.next;\r\n    if (snake.tail === null) snake.tail = snake.head;\r\n\r\n    const foodConsumed = nextHeadCell === foodCell;\r\n    if (foodConsumed) {\r\n      // This function mutates newSnakeCells.\r\n      growSnake(newSnakeCells);\r\n      handleFoodConsumption(newSnakeCells);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n  };\r\n\r\n  // This function mutates newSnakeCells.\r\n  const growSnake = newSnakeCells => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      // Snake is positioned such that it can't grow; don't do anything.\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n\r\n  const handleFoodConsumption = newSnakeCells => {\r\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\r\n    let nextFoodCell;\r\n\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setChance(Math.random())\r\n    console.log(chance)\r\n    if (score % 7 === 0 && score !== 0) {\r\n      setScore(score + 5);\r\n    }\r\n    else if (score % 9 === 0 && score !== 0) {\r\n      setScore(score + 10);\r\n    }\r\n    else {\r\n      setScore(score + 1);\r\n    }\r\n\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    setMenu(true)\r\n    setSpeed(150)\r\n    // const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    // setSnake(new LinkedList(snakeLLStartingValue));\r\n    // setFoodCell(snakeLLStartingValue.cell + 5);\r\n    // setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    // setDirection(Direction.RIGHT);\r\n\r\n  };\r\n\r\n  const resumeGame = () => {\r\n    setMenu(false)\r\n    setScore(0)\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {!menu && <h1>Score: {score}</h1>}\r\n      <div className=\"board\">\r\n        {board.map((row, rowIdx) => (\r\n          <div key={rowIdx} className=\"row\">\r\n            {row.map((cellValue, cellIdx) => {\r\n              const className = getCellClassName(\r\n                cellValue,\r\n                foodCell,\r\n                snakeCells,\r\n                score,\r\n                chance\r\n              );\r\n              return <div key={cellIdx} className={className}></div>;\r\n            })}\r\n          </div>\r\n        ))}\r\n        {menu && (\r\n        <div className='board-menu'>\r\n          <div className='board-menu-score'>\r\n            <h1 className='board-menu-score-title'>Your Result: {score}</h1>\r\n            <button className='board-menu-score-btn' onClick={resumeGame}>Try again</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst createBoard = BOARD_SIZE => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nconst getCoordsInDirection = (coords, direction) => {\r\n  if (direction === Direction.UP) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.RIGHT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.DOWN) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.LEFT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n};\r\n\r\nconst isOutOfBounds = (coords, board) => {\r\n  const {row, col} = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n  return false;\r\n};\r\n\r\nconst getDirectionFromKey = key => {\r\n  if (key === 'ArrowUp') return Direction.UP;\r\n  if (key === 'ArrowRight') return Direction.RIGHT;\r\n  if (key === 'ArrowDown') return Direction.DOWN;\r\n  if (key === 'ArrowLeft') return Direction.LEFT;\r\n  return '';\r\n};\r\n\r\nconst getNextNodeDirection = (node, currentDirection) => {\r\n  if (node.next === null) return currentDirection;\r\n  const {row: currentRow, col: currentCol} = node.value;\r\n  const {row: nextRow, col: nextCol} = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.RIGHT;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.LEFT;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.DOWN;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.UP;\r\n  }\r\n  return '';\r\n};\r\n\r\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection,\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection,\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nconst getOppositeDirection = direction => {\r\n  if (direction === Direction.UP) return Direction.DOWN\r\n  if (direction === Direction.RIGHT) return Direction.LEFT;\r\n  if (direction === Direction.DOWN) return Direction.UP;\r\n  if (direction === Direction.LEFT) return Direction.RIGHT;\r\n};\r\n\r\nconst getCellClassName = (\r\n  cellValue,\r\n  foodCell,\r\n  snakeCells,\r\n  score,\r\n  chance\r\n) => {\r\n  let className = 'cell';\r\n  console.log(chance)\r\n  if (cellValue === foodCell) {\r\n    if (score % 7 === 0 && score !== 0) {\r\n      className = 'cell cell-purple';\r\n    }\r\n    else if (score % 19 === 0 && score !== 0) {\r\n      className = 'cell cell-blue';\r\n    }\r\n    else {\r\n      className = 'cell cell-red';\r\n    }\r\n  \r\n  }\r\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\r\n\r\n  return className;\r\n};\r\n\r\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}