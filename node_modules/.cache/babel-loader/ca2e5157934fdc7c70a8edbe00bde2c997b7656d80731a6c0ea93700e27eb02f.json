{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardSize = 10;\nfunction linkedListNode(value) {\n  return {\n    value,\n    next: null\n  };\n}\nfunction singlyLinkedList(value) {\n  const node = linkedListNode(value);\n  return {\n    head: node,\n    tail: node\n  };\n}\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT'\n};\nconst Board = () => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(boardSize));\n  const [snake, setSnake] = useState(new LinkedList(getStartingSnakeLLValue(board)));\n  const [snakeCells, setSnakeCells] = useState(new Set([snake.head.value.cell]));\n  // Naively set the starting food cell 5 cells away from the starting snake cell.\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(false);\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col\n    };\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.includes(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n    const newHead = new linkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n    setSnakeCells(newSnakeCells);\n  };\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n    newSnakeCells.add(newTailCell);\n  };\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = boardSize * boardSize;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell) continue;\n      break;\n    }\n    const nextFoodShouldReverseDirection = Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cellValue, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${snakeCells.includes(cellValue) ? \"cell-green\" : \"\"}`\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"7D4NlLLi+tOKc2IV1Geu+c9hHqI=\");\n_c = Board;\nconst createBoard = boardSize => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < boardSize; row++) {\n    const currentRow = [];\n    for (let col = 0; col < boardSize; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1\n    };\n  }\n};\nconst isOutOfBounds = (coords, board) => {\n  const {\n    row,\n    col\n  } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {\n    row: currentRow,\n    col: currentCol\n  } = node.value;\n  const {\n    row: nextRow,\n    col: nextCol\n  } = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(snakeTail, currentDirection);\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col\n  };\n  const growthNodeCoords = getCoordsInDirection(currentTailCoords, growthDirection);\n  return growthNodeCoords;\n};\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\nconst getCellClassName = (cellValue, foodCell, foodShouldReverseDirection, snakeCells) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n  return className;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","boardSize","linkedListNode","value","next","singlyLinkedList","node","head","tail","Direction","UP","RIGHT","DOWN","LEFT","Board","_s","score","setScore","board","setBoard","createBoard","snake","setSnake","LinkedList","getStartingSnakeLLValue","snakeCells","setSnakeCells","Set","cell","foodCell","setFoodCell","direction","setDirection","foodShouldReverseDirection","setFoodShouldReverseDirection","moveSnake","currentHeadCoords","row","col","nextHeadCoords","getCoordsInDirection","isOutOfBounds","handleGameOver","nextHeadCell","includes","newHead","currentHead","newSnakeCells","delete","add","foodConsumed","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","getGrowthNodeCoords","newTailCell","newTail","LinkedListNode","currentTail","tailNextNodeDirection","getNextNodeDirection","newDirection","getOppositeDirection","reverseLinkedList","snakeHead","maxPossibleCellValue","nextFoodCell","randomIntFromInterval","has","nextFoodShouldReverseDirection","Math","random","PROBABILITY_OF_DIRECTION_REVERSAL_FOOD","snakeLLStartingValue","className","children","map","rowIndex","cellValue","cellIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","counter","currentRow","push","coords","length","getDirectionFromKey","key","currentDirection","currentCol","nextRow","nextCol","snakeTail","growthDirection","currentTailCoords","getCellClassName","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Board.css\";\r\n\r\nconst boardSize = 10;\r\n\r\nfunction linkedListNode(value) {\r\n  return {\r\n    value,\r\n    next: null,\r\n  };\r\n}\r\n\r\nfunction singlyLinkedList(value) {\r\n  const node = linkedListNode(value);\r\n  return {\r\n    head: node,\r\n    tail: node,\r\n  };\r\n}\r\n\r\nconst Direction = {\r\n  UP: 'UP',\r\n  RIGHT: 'RIGHT',\r\n  DOWN: 'DOWN',\r\n  LEFT: 'LEFT',\r\n};\r\n\r\nconst Board = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [board, setBoard] = useState(createBoard(boardSize));\r\n  const [snake, setSnake] = useState(\r\n    new LinkedList(getStartingSnakeLLValue(board)),\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState(\r\n    new Set([snake.head.value.cell]),\r\n  );\r\n  // Naively set the starting food cell 5 cells away from the starting snake cell.\r\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\r\n  const [direction, setDirection] = useState(Direction.RIGHT);\r\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\r\n    false,\r\n  );\r\n  const moveSnake = () => {\r\n    const currentHeadCoords = {\r\n      row: snake.head.value.row,\r\n      col: snake.head.value.col,\r\n    };\r\n\r\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\r\n    if (isOutOfBounds(nextHeadCoords, board)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n    if (snakeCells.includes(nextHeadCell)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n\r\n    const newHead = new linkedListNode({\r\n      row: nextHeadCoords.row,\r\n      col: nextHeadCoords.col,\r\n      cell: nextHeadCell,\r\n    });\r\n    const currentHead = snake.head;\r\n    snake.head = newHead;\r\n    currentHead.next = newHead;\r\n\r\n    const newSnakeCells = new Set(snakeCells);\r\n    newSnakeCells.delete(snake.tail.value.cell);\r\n    newSnakeCells.add(nextHeadCell);\r\n\r\n    snake.tail = snake.tail.next;\r\n    if (snake.tail === null) snake.tail = snake.head;\r\n\r\n    const foodConsumed = nextHeadCell === foodCell;\r\n    if (foodConsumed) {\r\n      // This function mutates newSnakeCells.\r\n      growSnake(newSnakeCells);\r\n      if (foodShouldReverseDirection) reverseSnake();\r\n      handleFoodConsumption(newSnakeCells);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n  };\r\n  const growSnake = newSnakeCells => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      // Snake is positioned such that it can't grow; don't do anything.\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n  };\r\n\r\n  const reverseSnake = () => {\r\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\r\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\r\n    setDirection(newDirection);\r\n\r\n    // The tail of the snake is really the head of the linked list, which\r\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\r\n    reverseLinkedList(snake.tail);\r\n    const snakeHead = snake.head;\r\n    snake.head = snake.tail;\r\n    snake.tail = snakeHead;\r\n  };\r\n\r\n  const handleFoodConsumption = newSnakeCells => {\r\n    const maxPossibleCellValue = boardSize * boardSize;\r\n    let nextFoodCell;\r\n    // In practice, this will never be a time-consuming operation. Even\r\n    // in the extreme scenario where a snake is so big that it takes up 90%\r\n    // of the board (nearly impossible), there would be a 10% chance of generating\r\n    // a valid new food cell--so an average of 10 operations: trivial.\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    const nextFoodShouldReverseDirection =\r\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\r\n    setScore(score + 1);\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    setScore(0);\r\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\r\n    setSnake(new LinkedList(snakeLLStartingValue));\r\n    setFoodCell(snakeLLStartingValue.cell + 5);\r\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\r\n    setDirection(Direction.RIGHT);\r\n  };\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cellValue, cellIndex) => (\r\n            <div\r\n              key={cellIndex}\r\n              className={`cell ${\r\n                snakeCells.includes(cellValue) ? \"cell-green\" : \"\"\r\n              }`}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst createBoard = (boardSize) => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < boardSize; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < boardSize; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\nconst getCoordsInDirection = (coords, direction) => {\r\n  if (direction === Direction.UP) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.RIGHT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.DOWN) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.LEFT) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n};\r\n\r\nconst isOutOfBounds = (coords, board) => {\r\n  const {row, col} = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= board.length || col >= board[0].length) return true;\r\n  return false;\r\n};\r\n\r\nconst getDirectionFromKey = key => {\r\n  if (key === 'ArrowUp') return Direction.UP;\r\n  if (key === 'ArrowRight') return Direction.RIGHT;\r\n  if (key === 'ArrowDown') return Direction.DOWN;\r\n  if (key === 'ArrowLeft') return Direction.LEFT;\r\n  return '';\r\n};\r\n\r\nconst getNextNodeDirection = (node, currentDirection) => {\r\n  if (node.next === null) return currentDirection;\r\n  const {row: currentRow, col: currentCol} = node.value;\r\n  const {row: nextRow, col: nextCol} = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.RIGHT;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.LEFT;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.DOWN;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.UP;\r\n  }\r\n  return '';\r\n};\r\n\r\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection,\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection,\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nconst getOppositeDirection = direction => {\r\n  if (direction === Direction.UP) return Direction.DOWN;\r\n  if (direction === Direction.RIGHT) return Direction.LEFT;\r\n  if (direction === Direction.DOWN) return Direction.UP;\r\n  if (direction === Direction.LEFT) return Direction.RIGHT;\r\n};\r\n\r\nconst getCellClassName = (\r\n  cellValue,\r\n  foodCell,\r\n  foodShouldReverseDirection,\r\n  snakeCells,\r\n) => {\r\n  let className = 'cell';\r\n  if (cellValue === foodCell) {\r\n    if (foodShouldReverseDirection) {\r\n      className = 'cell cell-purple';\r\n    } else {\r\n      className = 'cell cell-red';\r\n    }\r\n  }\r\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\r\n\r\n  return className;\r\n};\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}