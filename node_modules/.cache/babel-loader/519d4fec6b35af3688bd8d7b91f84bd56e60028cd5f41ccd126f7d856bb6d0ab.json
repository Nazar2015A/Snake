{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\project\\\\snake\\\\front-end\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boardSize = 10;\nfunction linkedListNode(value) {\n  return {\n    value,\n    next: null\n  };\n}\nfunction singlyLinkedList(value) {\n  const node = linkedListNode(value);\n  return {\n    head: node,\n    tail: node\n  };\n}\nconst Board = () => {\n  _s();\n  const [board, setBoard] = useState(createBoard(boardSize));\n  const [snakeCells, setSnakeCells] = useState([44]);\n  const [snake, setSnake] = useState(singlyLinkedList(44));\n  console.log(board);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cellValue, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${snakeCells.ahs(cellValue) ? 'cell-green' : ''}`\n      }, cellIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"If7mUfTqbMtRdpVIS13JEOd/RRw=\");\n_c = Board;\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","boardSize","linkedListNode","value","next","singlyLinkedList","node","head","tail","Board","_s","board","setBoard","createBoard","snakeCells","setSnakeCells","snake","setSnake","console","log","className","children","map","row","rowIndex","cellValue","cellIndex","ahs","fileName","_jsxFileName","lineNumber","columnNumber","_c","BOARD_SIZE","counter","currentRow","col","push","$RefreshReg$"],"sources":["C:/Users/user/Desktop/project/snake/front-end/src/components/Board/Board.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport './Board.css'\r\n\r\nconst boardSize = 10;\r\n\r\nfunction linkedListNode(value) {\r\n  return {\r\n    value,\r\n    next: null,\r\n  };\r\n}\r\n\r\nfunction singlyLinkedList(value) {\r\n  const node = linkedListNode(value);\r\n  return {\r\n    head: node,\r\n    tail: node,\r\n  };\r\n}\r\n\r\nconst Board = () => {\r\n\r\n  const [board, setBoard] = useState(createBoard(boardSize))\r\n  const [snakeCells, setSnakeCells] = useState([44])\r\n  const [snake, setSnake] = useState(singlyLinkedList(44))\r\n\r\n  console.log(board)\r\n  return (\r\n    <div className='board'>\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className='row'>\r\n          {row.map((cellValue, cellIndex) => (\r\n            <div key={cellIndex} className={`cell ${snakeCells.ahs(cellValue) ? 'cell-green' : ''}`}></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst createBoard = BOARD_SIZE => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < BOARD_SIZE; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < BOARD_SIZE; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport default Board"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,SAAS,GAAG,EAAE;AAEpB,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7B,OAAO;IACLA,KAAK;IACLC,IAAI,EAAE;EACR,CAAC;AACH;AAEA,SAASC,gBAAgBA,CAACF,KAAK,EAAE;EAC/B,MAAMG,IAAI,GAAGJ,cAAc,CAACC,KAAK,CAAC;EAClC,OAAO;IACLI,IAAI,EAAED,IAAI;IACVE,IAAI,EAAEF;EACR,CAAC;AACH;AAEA,MAAMG,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACe,WAAW,CAACZ,SAAS,CAAC,CAAC;EAC1D,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAClD,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAACO,gBAAgB,CAAC,EAAE,CAAC,CAAC;EAExDa,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;EAClB,oBACEX,OAAA;IAAKoB,SAAS,EAAC,OAAO;IAAAC,QAAA,EACnBV,KAAK,CAACW,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACvBxB,OAAA;MAAoBoB,SAAS,EAAC,KAAK;MAAAC,QAAA,EAChCE,GAAG,CAACD,GAAG,CAAC,CAACG,SAAS,EAAEC,SAAS,kBAC5B1B,OAAA;QAAqBoB,SAAS,EAAG,QAAON,UAAU,CAACa,GAAG,CAACF,SAAS,CAAC,GAAG,YAAY,GAAG,EAAG;MAAE,GAA9EC,SAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2E,CAC/F;IAAC,GAHMP,QAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAArB,EAAA,CAlBKD,KAAK;AAAAuB,EAAA,GAALvB,KAAK;AAoBX,MAAMI,WAAW,GAAGoB,UAAU,IAAI;EAChC,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMvB,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIY,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGU,UAAU,EAAEV,GAAG,EAAE,EAAE;IACzC,MAAMY,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,UAAU,EAAEG,GAAG,EAAE,EAAE;MACzCD,UAAU,CAACE,IAAI,CAACH,OAAO,EAAE,CAAC;IAC5B;IACAvB,KAAK,CAAC0B,IAAI,CAACF,UAAU,CAAC;EACxB;EACA,OAAOxB,KAAK;AACd,CAAC;AAED,eAAeF,KAAK;AAAA,IAAAuB,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}